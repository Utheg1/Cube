/**
 * DO NOT EDIT THIS FILE
 */

#include <iostream>
#include <functional>
#include <string>
#include <vector>
#include "Cube.h"
#include "puhp-tests/PuhPTests.hpp"

using std::cout, std::cin, std::endl;
using std::string;
using PuhPTests::Tests;
using PuhPTests::Test;

/**
 * Prototypes
 */
void testConstructors(Tests& tests);
void testSettersAndGetters(Tests& tests);
void testValidation(Tests& tests);
void testDisplayCube(Tests& tests);

/**
 * main()
 */
int main() {
    Tests tests(4);

    std::vector<std::function<void(Tests&)>> fs = {
        testConstructors,
        testSettersAndGetters,
        testValidation,
        testDisplayCube
    };

    for (auto f : fs) {
        f(tests);
    }

    tests.setResultsFileName("results-cpp.json");
    tests.run(true);

    cout << "Cube Tests Complete" << endl;
    return 0;
}

/**
 * Test default constructor initializes members correctly
 */
void testConstructors(Tests& tests) {
    auto t = tests.createTest("Constructor");
    t->setFixedPointsPossible(2);
    t->setNormalizedPointsPossibleTarget(1);

    Cube c;
    t->assertEqual(c.getSide(), 0, 1, "Default constructor should set side = 0");
}

/**
 * Test setSide() and getSide()
 */
void testSettersAndGetters(Tests& tests) {
    auto t = tests.createTest("Setters and Getters");
    t->setFixedPointsPossible(4);
    t->setNormalizedPointsPossibleTarget(2);

    Cube c;
    c.setSide(5);
    t->assertEqual(c.getSide(), 5, 2, "setSide(5) should set side = 5");
}

/**
 * Test validation logic (simulated from main)
 */
void testValidation(Tests& tests) {
    auto t = tests.createTest("Validation");
    t->setFixedPointsPossible(3);
    t->setNormalizedPointsPossibleTarget(1);

    Cube c;
    c.setSide(-2);
    t->assertEqual(c.getSide(), -2, 1, "Cube.setSide() should accept negative (main handles validation)");
}

/**
 * Test displayCube() output for correctness
 */
void testDisplayCube(Tests& tests) {
    auto t = tests.createTest("Display Cube");
    t->setFixedPointsPossible(5);
    t->setNormalizedPointsPossibleTarget(3);

    Cube c;
    c.setSide(2);

    PuhPTests::OutputCapture capture;
    capture.start();
    c.displayCube();
    capture.stop();

    string out = capture.getStdOut();

    // Simple heuristic check: should contain '*'
    bool containsStar = out.find('*') != string::npos;
    t->assertTrue(containsStar, 2, "Output should contain '*' characters");

    // Should have multiple lines
    int newlineCount = std::count(out.begin(), out.end(), '\n');
    t->assertTrue(newlineCount >= 2, 2, "Output should have multiple lines");
}
